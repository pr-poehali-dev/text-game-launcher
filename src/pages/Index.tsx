import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import Icon from '@/components/ui/icon';

const Index = () => {
  const [gameOutput, setGameOutput] = useState<string[]>([
    '> –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞...',
    '> –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞...',
    '> –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∫–æ–º–∞–Ω–¥',
    '',
    '‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó',
    '‚ïë                     –ò–ì–†–û–í–û–ô –¢–ï–†–ú–ò–ù–ê–õ                         ‚ïë',
    '‚ïë                        v1.0.0                                ‚ïë',
    '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù',
    '',
    '> –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∫–æ–¥ –∏–≥—Ä—ã –¥–ª—è –Ω–∞—á–∞–ª–∞...'
  ]);
  const [currentInput, setCurrentInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const outputRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (outputRef.current) {
      outputRef.current.scrollTop = outputRef.current.scrollHeight;
    }
  }, [gameOutput]);

  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.focus();
    }
  }, []);

  const handleCommand = (command: string) => {
    if (!command.trim()) return;

    setIsTyping(true);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newOutput = [...gameOutput, `$ ${command}`];
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (command.toLowerCase() === 'clear') {
      setGameOutput([
        '> –¢–µ—Ä–º–∏–Ω–∞–ª –æ—á–∏—â–µ–Ω',
        '> –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∫–æ–º–∞–Ω–¥'
      ]);
    } else if (command.toLowerCase() === 'help') {
      newOutput.push(
        '',
        '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê',
        '  clear     - –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª',
        '  help      - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É',
        '  start     - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É',
        '  status    - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã',
        '  exit      - –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã',
        '',
        '> –í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...'
      );
      setGameOutput(newOutput);
    } else if (command.toLowerCase() === 'status') {
      newOutput.push(
        '',
        '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê',
        '  CPU: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%',
        '  RAM: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 70%',
        '  –ò–≥—Ä–∞: –ù–ï –ó–ê–ì–†–£–ñ–ï–ù–ê',
        '  –°—Ç–∞—Ç—É—Å: –û–ñ–ò–î–ê–ù–ò–ï –ö–û–î–ê –ò–ì–†–´',
        ''
      );
      setGameOutput(newOutput);
    } else if (command.toLowerCase() === 'start') {
      newOutput.push(
        '',
        '> –û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞',
        '> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª',
        ''
      );
      setGameOutput(newOutput);
    } else if (command.toLowerCase() === 'exit') {
      newOutput.push(
        '',
        '> –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...',
        '> –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëæ',
        ''
      );
      setGameOutput(newOutput);
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ –Ω–∞ –∫–æ–¥
      if (command.includes('function') || command.includes('class') || command.includes('const') || command.includes('let') || command.includes('var')) {
        newOutput.push(
          '',
          '> –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–¥ JavaScript...',
          '> –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...',
          '> –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É—é –≤ –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫...',
          '',
          '‚úì –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!',
          '> –í–≤–µ–¥–∏—Ç–µ "start" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã',
          ''
        );
      } else {
        newOutput.push(
          '',
          `> –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: "${command}"`,
          '> –í–≤–µ–¥–∏—Ç–µ "help" –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏',
          ''
        );
      }
      setGameOutput(newOutput);
    }
    
    setTimeout(() => {
      setIsTyping(false);
    }, 1000);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (currentInput.trim()) {
      handleCommand(currentInput);
      setCurrentInput('');
    }
  };

  return (
    <div className="min-h-screen bg-terminal-black text-terminal-green font-mono">
      {/* Header */}
      <div className="border-b border-terminal-gray p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Icon name="Terminal" size={24} className="text-terminal-green" />
            <h1 className="text-lg font-bold">–ò–ì–†–û–í–û–ô –¢–ï–†–ú–ò–ù–ê–õ</h1>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 rounded-full bg-red-500"></div>
            <div className="w-3 h-3 rounded-full bg-yellow-500"></div>
            <div className="w-3 h-3 rounded-full bg-terminal-green"></div>
          </div>
        </div>
      </div>

      {/* Terminal Output */}
      <div 
        ref={outputRef}
        className="h-[calc(100vh-180px)] overflow-y-auto p-6 space-y-1 text-sm leading-relaxed"
      >
        {gameOutput.map((line, index) => (
          <div key={index} className="whitespace-pre-wrap">
            {line.startsWith('$') ? (
              <span className="text-terminal-grayLight">{line}</span>
            ) : line.includes('‚úì') ? (
              <span className="text-terminal-green font-bold">{line}</span>
            ) : line.includes('–û—à–∏–±–∫–∞') || line.includes('–æ—à–∏–±–∫–∞') ? (
              <span className="text-red-400">{line}</span>
            ) : (
              line
            )}
          </div>
        ))}
        {isTyping && (
          <div className="flex items-center space-x-1">
            <span>></span>
            <span className="animate-blink">_</span>
          </div>
        )}
      </div>

      {/* Input Area */}
      <div className="border-t border-terminal-gray p-4">
        <form onSubmit={handleSubmit} className="flex items-center space-x-2">
          <span className="text-terminal-green">$</span>
          <Input
            ref={inputRef}
            value={currentInput}
            onChange={(e) => setCurrentInput(e.target.value)}
            className="flex-1 bg-terminal-black border-terminal-gray text-terminal-green font-mono placeholder-terminal-grayLight focus:border-terminal-green"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã..."
            autoComplete="off"
          />
          <Button 
            type="submit"
            className="bg-terminal-green text-terminal-black hover:bg-terminal-green/80 font-mono"
          >
            <Icon name="Send" size={16} />
          </Button>
        </form>
        
        {/* Quick Commands */}
        <div className="flex flex-wrap gap-2 mt-3">
          {['help', 'clear', 'status', 'start'].map((cmd) => (
            <Button
              key={cmd}
              variant="outline"
              size="sm"
              onClick={() => handleCommand(cmd)}
              className="border-terminal-gray text-terminal-green hover:bg-terminal-gray hover:text-terminal-green font-mono text-xs"
            >
              {cmd}
            </Button>
          ))}
        </div>
      </div>
    </div>
  );
};

export default Index;