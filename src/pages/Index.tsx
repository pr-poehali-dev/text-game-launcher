import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import Icon from '@/components/ui/icon';
import { Task, GameState, LEVELS } from '@/types/game';
import { tasks } from '@/data/tasks';

const Index = () => {
  const [gameOutput, setGameOutput] = useState<string[]>([
    '> –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞...',
    '> –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞...',
    '> –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∫–æ–º–∞–Ω–¥',
    '',
    '‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó',
    '‚ïë                 –®–ö–û–õ–¨–ù–´–ô –°–ò–°–ê–î–ú–ò–ù ‚Äî –ú–û–°–ö–í–ê                   ‚ïë',
    '‚ïë                        v1.0.0                                ‚ïë',
    '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù',
    '',
    '> –í–≤–µ–¥–∏—Ç–µ "game" –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏–ª–∏ "help" –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏...'
  ]);
  const [currentInput, setCurrentInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [gameState, setGameState] = useState<GameState>({
    currentLevel: 0,
    currentTask: null,
    score: 0,
    isGameActive: false,
    showingHint: false
  });
  const outputRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (outputRef.current) {
      outputRef.current.scrollTop = outputRef.current.scrollHeight;
    }
  }, [gameOutput]);

  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.focus();
    }
  }, []);

  const getRandomTask = (level: number): Task => {
    const levelTasks = tasks.filter(t => t.level === level);
    return levelTasks[Math.floor(Math.random() * levelTasks.length)];
  };

  const startLevel = (level: number) => {
    const task = getRandomTask(level);
    setGameState({
      currentLevel: level,
      currentTask: task,
      score: 0,
      isGameActive: true,
      showingHint: false
    });
    
    const newOutput = [...gameOutput, 
      '',
      `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –£–†–û–í–ï–ù–¨: ${LEVELS[level as keyof typeof LEVELS]} ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`,
      '',
      `=== ${task.title} ===`,
      task.description,
      ''
    ];
    
    task.options.forEach((option, index) => {
      newOutput.push(`${index + 1}. ${option}`);
    });
    
    newOutput.push(
      '0. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É',
      '',
      '> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞...'
    );
    
    setGameOutput(newOutput);
  };

  const handleGameAnswer = (choice: number) => {
    if (!gameState.currentTask) return;
    
    const newOutput = [...gameOutput, `$ ${choice}`];
    
    if (choice === 0) {
      newOutput.push(
        '',
        `üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: ${gameState.currentTask.hint}`,
        ''
      );
      setGameState(prev => ({ ...prev, showingHint: true }));
    } else if (choice === gameState.currentTask.solution) {
      newOutput.push(
        '',
        '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞.',
        `+${gameState.showingHint ? '5' : '10'} –æ—á–∫–æ–≤ –∫ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —Å–∏—Å–∞–¥–º–∏–Ω–∞!`,
        '',
        '> –í–≤–µ–¥–∏—Ç–µ "next" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ "menu" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
      );
      setGameState(prev => ({ 
        ...prev, 
        score: prev.score + (prev.showingHint ? 5 : 10)
      }));
    } else {
      newOutput.push(
        '',
        '‚ùå –ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
        '> –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–ª–∏ 0 –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏'
      );
    }
    
    setGameOutput(newOutput);
  };

  const handleCommand = (command: string) => {
    if (!command.trim()) return;

    setIsTyping(true);
    
    const cmd = command.toLowerCase();
    const newOutput = [...gameOutput, `$ ${command}`];
    
    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä
    if (gameState.isGameActive && /^\d+$/.test(cmd)) {
      handleGameAnswer(parseInt(cmd));
      setIsTyping(false);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (cmd === 'clear') {
      setGameOutput([
        '> –¢–µ—Ä–º–∏–Ω–∞–ª –æ—á–∏—â–µ–Ω',
        '> –í–≤–µ–¥–∏—Ç–µ "game" –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã'
      ]);
    } else if (cmd === 'help') {
      newOutput.push(
        '',
        '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê',
        '  clear     - –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª',
        '  help      - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É',
        '  game      - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É "–®–∫–æ–ª—å–Ω—ã–π –°–∏—Å–∞–¥–º–∏–Ω"',
        '  status    - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã',
        '  score     - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç',
        '  exit      - –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã',
        ''
      );
      setGameOutput(newOutput);
    } else if (cmd === 'game') {
      newOutput.push(
        '',
        'üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É: –®–∫–æ–ª—å–Ω—ã–π –°–∏—Å–∞–¥–º–∏–Ω ‚Äî –ú–æ—Å–∫–≤–∞!',
        '',
        '–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:',
        '1. –ù–æ–≤–∏—á–æ–∫',
        '2. –û–ø—ã—Ç–Ω—ã–π',
        '3. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª',
        '',
        '> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–≤–Ω—è (1-3)...'
      );
      setGameOutput(newOutput);
      setGameState(prev => ({ ...prev, isGameActive: false }));
    } else if (['1', '2', '3'].includes(cmd) && !gameState.isGameActive) {
      startLevel(parseInt(cmd));
    } else if (cmd === 'next' && gameState.isGameActive) {
      if (gameState.currentTask) {
        const newTask = getRandomTask(gameState.currentLevel);
        setGameState(prev => ({ 
          ...prev, 
          currentTask: newTask,
          showingHint: false
        }));
        
        newOutput.push(
          '',
          `=== ${newTask.title} ===`,
          newTask.description,
          ''
        );
        
        newTask.options.forEach((option, index) => {
          newOutput.push(`${index + 1}. ${option}`);
        });
        
        newOutput.push(
          '0. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É',
          ''
        );
        
        setGameOutput(newOutput);
      }
    } else if (cmd === 'menu') {
      setGameState({
        currentLevel: 0,
        currentTask: null,
        score: 0,
        isGameActive: false,
        showingHint: false
      });
      newOutput.push(
        '',
        '> –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        '> –í–≤–µ–¥–∏—Ç–µ "game" –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã',
        ''
      );
      setGameOutput(newOutput);
    } else if (cmd === 'score') {
      newOutput.push(
        '',
        `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –°–¢–ê–¢–ò–°–¢–ò–ö–ê ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`,
        `  –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: ${gameState.score} –æ—á–∫–æ–≤`,
        `  –£—Ä–æ–≤–µ–Ω—å: ${gameState.currentLevel ? LEVELS[gameState.currentLevel as keyof typeof LEVELS] : '–ù–µ –≤—ã–±—Ä–∞–Ω'}`,
        `  –°—Ç–∞—Ç—É—Å: ${gameState.isGameActive ? '–í –∏–≥—Ä–µ' : '–í –º–µ–Ω—é'}`,
        ''
      );
      setGameOutput(newOutput);
    } else if (cmd === 'status') {
      newOutput.push(
        '',
        '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê',
        '  CPU: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%',
        '  RAM: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 70%',
        '  –ò–≥—Ä–∞: –®–ö–û–õ–¨–ù–´–ô –°–ò–°–ê–î–ú–ò–ù –ó–ê–ì–†–£–ñ–ï–ù–ê ‚úì',
        `  –°—Ç–∞—Ç—É—Å: ${gameState.isGameActive ? '–ê–ö–¢–ò–í–ù–ê' : '–û–ñ–ò–î–ê–ù–ò–ï'}`,
        ''
      );
      setGameOutput(newOutput);
    } else if (cmd === 'exit') {
      newOutput.push(
        '',
        '> –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...',
        '> –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! üë®‚Äçüíª',
        ''
      );
      setGameOutput(newOutput);
    } else {
      newOutput.push(
        '',
        `> –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: "${command}"`,
        '> –í–≤–µ–¥–∏—Ç–µ "help" –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏',
        ''
      );
      setGameOutput(newOutput);
    }
    
    setTimeout(() => {
      setIsTyping(false);
    }, 1000);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (currentInput.trim()) {
      handleCommand(currentInput);
      setCurrentInput('');
    }
  };

  return (
    <div className="min-h-screen bg-terminal-black text-terminal-green font-mono">
      {/* Header */}
      <div className="border-b border-terminal-gray p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Icon name="Terminal" size={24} className="text-terminal-green" />
            <h1 className="text-lg font-bold">–®–ö–û–õ–¨–ù–´–ô –°–ò–°–ê–î–ú–ò–ù</h1>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 rounded-full bg-red-500"></div>
            <div className="w-3 h-3 rounded-full bg-yellow-500"></div>
            <div className="w-3 h-3 rounded-full bg-terminal-green"></div>
          </div>
        </div>
      </div>

      {/* Terminal Output */}
      <div 
        ref={outputRef}
        className="h-[calc(100vh-180px)] overflow-y-auto p-6 space-y-1 text-sm leading-relaxed"
      >
        {gameOutput.map((line, index) => (
          <div key={index} className="whitespace-pre-wrap">
            {line.startsWith('$') ? (
              <span className="text-terminal-grayLight">{line}</span>
            ) : line.includes('‚úì') || line.includes('‚úÖ') ? (
              <span className="text-terminal-green font-bold">{line}</span>
            ) : line.includes('–û—à–∏–±–∫–∞') || line.includes('–æ—à–∏–±–∫–∞') || line.includes('‚ùå') ? (
              <span className="text-red-400">{line}</span>
            ) : line.includes('üí°') ? (
              <span className="text-yellow-400">{line}</span>
            ) : (
              line
            )}
          </div>
        ))}
        {isTyping && (
          <div className="flex items-center space-x-1">
            <span>></span>
            <span className="animate-blink">_</span>
          </div>
        )}
      </div>

      {/* Input Area */}
      <div className="border-t border-terminal-gray p-4">
        <form onSubmit={handleSubmit} className="flex items-center space-x-2">
          <span className="text-terminal-green">$</span>
          <Input
            ref={inputRef}
            value={currentInput}
            onChange={(e) => setCurrentInput(e.target.value)}
            className="flex-1 bg-terminal-black border-terminal-gray text-terminal-green font-mono placeholder-terminal-grayLight focus:border-terminal-green"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É..."
            autoComplete="off"
          />
          <Button 
            type="submit"
            className="bg-terminal-green text-terminal-black hover:bg-terminal-green/80 font-mono"
          >
            <Icon name="Send" size={16} />
          </Button>
        </form>
        
        {/* Quick Commands */}
        <div className="flex flex-wrap gap-2 mt-3">
          {gameState.isGameActive ? (
            ['0', '1', '2', '3', '4'].map((num) => (
              <Button
                key={num}
                variant="outline"
                size="sm"
                onClick={() => handleCommand(num)}
                className="border-terminal-gray text-terminal-green hover:bg-terminal-gray hover:text-terminal-green font-mono text-xs"
              >
                {num}
              </Button>
            ))
          ) : (
            ['help', 'game', 'clear', 'score'].map((cmd) => (
              <Button
                key={cmd}
                variant="outline"
                size="sm"
                onClick={() => handleCommand(cmd)}
                className="border-terminal-gray text-terminal-green hover:bg-terminal-gray hover:text-terminal-green font-mono text-xs"
              >
                {cmd}
              </Button>
            ))
          )}
        </div>
      </div>
    </div>
  );
};

export default Index;